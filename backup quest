// Objetivo: vincular una solicitud del cliente con los datos presentes en la BD

const express = require( 'express' );
const chalk = require( 'chalk' );
const mysql = require( 'mysql' );

// IMPORTAR la configuración mysql
const connection = require('./config.js');


const app = express();
const port = 3000;

//Importación del módulo body-parser y configuración

const bodyParser = require ('body-parser');

//Soporta cuerpos codificados con JSON
app.use(bodyParser.json()); // Soporta cuerpos codificados en URL
app.use (bodyParser.urlencoded ({extended: true}));

    /* Este módulo permite recuperar info enviada dsd el cliente (JSON o formato "x-www-form-urlencoded") y almacenarla en el cuerpo de la solicitud */


// Una ruta se declara de la siguiente manera:
// app.METHOD( PATH, HANDLER )
//app es una instancia de Express
//.METHOD es un método de solicitud HTTP (CRUD: CREATE, READ, UPDATE, DELETE)
// PATH es la ruta del servidor
// HANDLER es la función que se ejecuta cuando se reconoce la ruta

app.get ( '/' , (request, response) => { 
    response.send ( 'Wellcome to Express' ); 
  });

app.listen( port, (error) => {
    if (error) {
        throw new Error ('Something is happend...');
    }

    console.log(chalk.green.inverse.bold(`Server is listening on ${port}`)); 
});

// Crear ruta para obtener datos

/* Cuando un user sondea el servidor, http://localhost/api/employee, debe poder recuperar a todos los empleados y enviarlos de vuelta al cliente */


app.get('/api/employee', (request, response) => {
    //TODO get data (step 2)

    // Con la consulta SELECT de SQL puedo recuperar esta información.

    //Si se produce un error durante la solicitud, habrá una descripción en la variable error y puedo enviar un mensaje al user para advertirle

    //Si todo va bien, el resultado de la consulta SQL se almacenará en la variable results
    connection.query('SELECT * from employee', (error, results) => {
        // TODO Send the data (step 3)

        //Hay muchas soluciones para manejar errores: enviar una excepción o un estado con un mensaje de error genérico.

        //Si la consulta se ha ejecutado correctamente, los datos se devuelven en formato JSON.

        if (error){
            response.status(500).send(console.log(chalk.red.inverse('error')));
        }else {
            response.json(results);
        }
        
    });
});

//En el desarrollo de una API REST, podemos querer recuperar la info enviada desde el cliente (a menudo desde un formulario) y guardar esta info en una base de datos.

//1. Discovering POST with Express

//Buena práctica de desarrollo: utilizar el mensaje para enviar datos desde un cliente a un servidor.

//Ruta Express:

app.post( '/api/employee', ( request, results) => {
    //TODO obtiene los datos(paso 2)

    //EnGeneral, los datos se envían a través de un formulario (ej: registro, conexión, pago...)

    //[Simplifica la recuperación de datos enviados desde el cliente en JSON]

    //Instalar el módulo body-parser: npm install --save body-parser 
    //Importar el módulo en la aplicación y configurar [ se colocará antes de la declaración de la primera ruta]

    //Al usar body-parser, se tiene acceso a los contenidos de la solicitud de publicación en el cuerpo de la solicitud:

    //Datos almacenados en req.body
    const formData = request.body;

    //TODO guarda los datos (paso 3)

    //Consulta SQL INSERT --> insertar info en la tabla correspondiente

    //Principal problema durante una insercción --> superar problemas de inyección SQL (si le doy a un user típico la capacidad de enviar cualquier tipo de datos, puede enviar "código malicioso" y destruir nuestra BD)

    //Evitar esto,  we must "escape" (to render characters in strings ineffective) the data before inserting it. ¿?¿?¿?

    // Ejemplo básico de consulta SQL: 
    /* INSERT INTO employee (lastname, firstname, email) 
    VALUES (
        formData.lastname, 
        formData.firstname, 
        formData.email); */

    //To escape each element, hay que escribir la consulta así:
    /* INSERT INTO employee (lastname, firstname, email) 
    VALUES (
        mysql.escape(formData.lastname), 
        mysql.escape(formData.firstname), 
        mysql.escape(formData.email); */

    //Con el módulo mysql se propone una alternativa para evitar la redundancia: el carácter ? se puede utilizar como valor de reemplazo para todos los valores a escapar

    /* [CUIDADO: cada clave del objeto formData debe coincidir con el nombre del campo en la tabla. Nuestar formData debe tener la siguiente estructura:
        {
            Nombre : '' ,
            apellido : '' ,
            correo electrónico : '' , 
        }
    ] 
    [VENTAJA usar ? es la escalabilidad. Si se agrega/modifica/elimina un campo, no será necesario reescribir la consulta (siempre q el objeto recuperado coincida con los campos de la tabla)]
    */

    connection.query('INSERT INTO employee SET ?', formData, (error, results) => {
        // send a response to the client (step 4)
        // Si la insercción es exitosa, se informa al usuario con el retorno de un estado 200

        if ( error ) {
            console.log (error);
            response.status(500).send('Error saving an employee');
        } else {
            response.sendStatus(200);
        }

      });


});


